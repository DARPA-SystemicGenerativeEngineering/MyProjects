% REMUS_SIM.M Vehicle Simulator
% M-FILE INPUTS
% ------------------------------- ---------------------------------------
% + coeffs .mat - generated by COEFFS .M, typically for each run
% + vdata.mat - generated by COEFFS.M, typically for each run
clear;
clc;
close all;
% clear all variables
disp(sprintf ('\n\nREMUS DYNAMICS SIMULATOR'));
disp(sprintf ('Timothy Prestero, MIT/WHOI\n'));
%disp(sprintf (' NOTE: Model using %s REMUS dimensions. \n\n', vehicle));

%
% Output flags
%
show_step    = 1; 
show_speed   = 0;
show_pos     = 0;
run_savedata = 0; 
run_plots    = 0;
choose_int   = 0;
%choose_setup = 1 ;

%
%SET INTEGRATION METHOD
%
int_list = {'Basic Euler' 'Improved Euler' 'Fourth-Order Runge-Kutta'};
int_methods = {'euler' 'imp_euler' 'rkutta'}; 

if choose_int
    disp(sprintf(' Integration Method: \n'));
    for i = 1:size(int_list,2) ;
        disp(sprintf(' %i - %s', i, char(int_list(i))));
    end
    d = input ('\n Enter a number: ') ;
else
    d = 3;
end 

int_method = char(int_methods(d));

int_method

% check working directory
%cd_outputs ;

% create .mat files
d = clock ; yy = d(1) ; mo = d(2) ; dd = d(3) ; hh = d(4) ; 
mm = d(5) ; ss = d(6) ; 
date_string = datestr (datenum(yy ,mo, dd) ,1);
time_string = datestr(datenum(yy,mo,dd,hh,mm,ss) ,13) ;

% EXPERIMENTAL/ASSIGNED VALUES: initial conditions, input vector
% ------------------------------------------------------------------------------
% loading model inputs, generated in SIM_SETUP. M
% load input_vector % data from FIN_INPUTS. M on mission files
% load time_step
% load initial_state % data from INITIAL_CONDITIONS.M on above

ui = zeros(3,1000);
ui(3,:) = 3;
time_step = 0.01;
x = zeros(12,1);
XX = [];

pitch_max = 90 ;

%RUN MODEL
% ------------------------------------------------------------------------------
% Initialize number of steps and storage matrix
if strcmp(int_method,' euler')
    n_steps = size(ui, 2) ;
else
    n_steps = size(ui, 2)-1;
end 
%output_table = zeros(n_steps, size(x,1) + size(ui,1)+7);
disp (sprintf('\nSimulator running...'));

%MAIN PROGRAM
for i = 1:n_steps
    
    XX = [XX x];
    
    % Print current step for error checking
    if show_step == 1
        if ~rem(i*10 ,n_steps)
            disp( sprintf ('Steps Completed : %02d : %02d%% ',n_steps,i/n_steps*100));
        end
    end
    % Store current states x (n), inputs ui (n), and time in seconds
    %output_table(i,1:14) = [x' ui(:,i)'];
    %output_table(i ,21)  = (i-1)*time_step;
    % Calculate forces, accelerations
    %
    % * * CALLS REMS. M
    %
    % xdot(i) = f(x(i) ,u(i))
    [xdot , forces] = remus (x,ui(:,i)');
    
    % Store forces at step n
    %output_table(i,15:20) = [forces'];
    
    if strcmp(int_method, 'euler')
        %% EULER INTEGRATION to calculate new states x(n+1)
        %% x(i+1) = xCi) + dx/dt*delta_t
        %% NOTE: overwriting old states with new states, saving back at the top of the loop
        x = x + (xdot .* time_step) ;
    elseif strcmp (int_method, 'imp_euler')
        %% IMPROVED EULER INTEGRATION to calculate new states
        k1_vec = x + (xdot .* time_step) ;
        k2_vec = remus(k1_vec, ui(:,(i+1))');
        x = x + 0.5 .* time_step .* (xdot + k2_vec);
    elseif strcmp(int_method, 'rkutta')
        %% RUNGE-KUTTA APPROXIMATION to calculate new states
        %% NOTE: ideally, should be approximating ui values for k2,k3
        %% ie (ui(: ,i)+ui(: ,i+1))/2
        k1_vec = xdot;
        k2_vec = remus(x+( 0.5 .* time_step.*k1_vec),((ui(:,i)+ui(:,i+1))./2)');
        k3_vec = remus(x+( 0.5 .*time_step.*k2_vec),((ui(:,i)+ui(:,i+1))./2)');
        k4_vec = remus(x+(time_step.*k3_vec) , ui(: ,i+1)') ;
        x = x + time_step/6.*(k1_vec+2.*k2_vec+2.*k3_vec+k4_vec) ;
        % k1_vec = xdot;
        % k2_vec = remus(x+(O.5.*time_step.*k1_vec), ((ui(: ,i)+ui(: ,i+1)) ./2)')
        % k3_vec = remus(x+(O.5.*time_step.*k2_vec), ui(: ,i)') ;
        % k4 vec = remus (x+ (time_step. *k3_ vec), ui (: , i) ') ;
        % x = x + time_step/6.*(k1_vec +2.*k2_vec +2.*k3_vec +k4_vec)
    end
end

%Plot Output
for i = 1:size(x,1)
    figure;
    plot([1:n_steps],XX(i,:),'*');
    title(sprintf('%d',i));
end

disp(sprintf('Simulation Complete.\n'));

return;